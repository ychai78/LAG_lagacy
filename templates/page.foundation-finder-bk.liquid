{% comment %}
This template is also used for listing out articles of a specific tag.
You can change layouts or styles by checking if current_tags is true.
{% endcomment %}


<header class="page-header center">
  
 

 
</header>
<div class="main-wrapper row">
  

 
<div class="filters">

  
  <div class="ui-group">
    <h3>Undertone</h3>
    <div class="button-group js-radio-button-group" data-filter-group="undertone">
      <button class="button is-checked" data-filter="">any</button>
      <button class="button" data-filter=".cool">Cool</button>
      <button class="button" data-filter=".neutral">Neutral</button>
      <button class="button" data-filter=".warm">Warm</button>
    </div>
  </div>

  <div class="ui-group">
    <h3>Finish</h3>
    <div class="button-group js-radio-button-group" data-filter-group="finish">
      <button class="button is-checked" data-filter="">any</button>
      <button class="button" data-filter=".dewy">Dewy</button>
      <button class="button" data-filter=".matte">Matte</button>
      <button class="button" data-filter=".luminous">Luminous</button>
    </div>
  </div>

  <div class="ui-group">
    <h3>Coverage</h3>
    <div class="button-group js-radio-button-group" data-filter-group="coverage">
      <button class="button is-checked" data-filter="">any</button>
      <button class="button" data-filter=".sheer">sheer</button>
      <button class="button" data-filter=".medium">medium</button>
      <button class="button" data-filter=".full">full</button>
    </div>
  </div>
   <div class="ui-group">
    <h3>Shade</h3>
    <div class="button-group js-radio-button-group" id ="shade-btn-group" data-filter-group="shade">
      <button class="button is-checked" data-filter="">any</button>
      <button class="button" data-filter=".light">light</button>
      <button class="button" data-filter=".medium">medium</button>
      <button class="button" data-filter=".tan">tan</button>
      <button class="button" data-filter=".dark">dark</button>
      <button class="button" data-filter=".deep">deep</button>
    </div>
  </div>

</div>

<div class="grid" id="shadeSelector-grid">
  
</div>




<div class="collection-wrapper">
	<div class="main-content-layout collections">
	  <div class="category product-grid">
   


    
    <div class="products-grid col-xs-12">



 {% for product in collections.foundation-finder.products %}
      {%- comment %}<locksmith:7d1c>{% endcomment -%}
        {%- capture var %}{% render 'locksmith-variables', scope: 'subject', subject: product, subject_parent: collections.foundation-finder, variable: 'transparent' %}{% endcapture %}{% if var == "true" %}{% else %}{% continue %}{% endif -%}
      {%- comment %}</locksmith:7d1c>{% endcomment -%}
      {%  for variant in product.variants %}
        		{% include 'product-grid-item-shade-finder' %}
      		{% endfor %}
          {% endfor %}

    </div>
    
   
 
  </div>
</div>
</div>
</div>



<style>
* { box-sizing: border-box; }

body {
  font-family: sans-serif;
}

/* ---- button ---- */

.button {
  display: inline-block;
  padding: 0.5em 1.0em;
  background: #EEE;
  border: none;
  border-radius: 7px;
  background-image: linear-gradient( to bottom, hsla(0, 0%, 0%, 0), hsla(0, 0%, 0%, 0.2) );
  color: #222;
  font-family: sans-serif;
  font-size: 16px;
  text-shadow: 0 1px white;
  cursor: pointer;
}

.button:hover {
  background-color: #8CF;
  text-shadow: 0 1px hsla(0, 0%, 100%, 0.5);
  color: #222;
}

.button:active,
.button.is-checked {
  background-color: #28F;
}

.button.is-checked {
  color: white;
  text-shadow: 0 -1px hsla(0, 0%, 0%, 0.8);
}

.button:active {
  box-shadow: inset 0 1px 10px hsla(0, 0%, 0%, 0.8);
}

/* ---- button-group ---- */

.button-group:after {
  content: '';
  display: block;
  clear: both;
}

.button-group .button {
  float: left;
  border-radius: 0;
  margin-left: 0;
  margin-right: 1px;
}

.button-group .button:first-child { border-radius: 0.5em 0 0 0.5em; }
.button-group .button:last-child { border-radius: 0 0.5em 0.5em 0; }

/* ---- isotope ---- */

.grid {
  background: #EEE;
  max-width: 1200px;
}

/* clear fix */
.grid:after {
  content: '';
  display: block;
  clear: both;
}

/* ui group */

.ui-group {
  display: inline-block;
}

.ui-group h3 {
  display: inline-block;
  vertical-align: top;
  line-height: 32px;
  margin-right: 0.2em;
  font-size: 16px;
}

.ui-group .button-group {
  display: inline-block;
  margin-right: 20px;
}

/* color-shape */

.color-shape {
  width: 70px;
  height: 70px;
  margin: 5px;
  float: left;
}
 
.color-shape.round {
  border-radius: 35px;
}
 
.color-shape.big.round {
  border-radius: 75px;
}
 
.color-shape.red { background: red; }
.color-shape.blue { background: blue; }
.color-shape.yellow { background: yellow; }
 
.color-shape.wide, .color-shape.big { width: 150px; }
.color-shape.tall, .color-shape.big { height: 150px; }
</style>
<script src="https://unpkg.com/isotope-layout@3/dist/isotope.pkgd.min.js"></script>
<script>
 $.get( "https://cdn.shopify.com/s/files/1/0944/0398/t/30/assets/foundationFinderData_013118.1.json", function( data ) {
        var HTML = '';
            for (var i = 0; i < data.length; i++) {
                value = data[i];
                HTML += '<div class="color-shape '
                +value.Undertone+ ' ' 
                +value.Coverage+ ' '
                +value.Shade+ ' '
                +value.Finish+ ' '
                +'" data-product="'+value.PageHandle
                +'" data-undertone="'+value.Undertone
                +'" data-coverage="'+value.Coverage
                +'" data-finish="'+value.Finish
                +'" data-shade="'+value.Shade
                +'" data-sku="'+value.SKU+'">'
                +value.SKU+'</div>';
            }
  $('#shadeSelector-grid').append(HTML);

    
    // init Isotope
    var $grid = $('.grid').isotope({
      itemSelector: '.color-shape'
    });

    // store filter for each group
    var filters = {};
    var resultProducts = [];
    var resultSku = [];
    var productList = "";
    var productSku = "";

      $('.filters').on( 'click', '.button', function() {
      var $this = $(this);
      // get group key
      var $buttonGroup = $this.parents('.button-group');
      var filterGroup = $buttonGroup.attr('data-filter-group');
      // set filter for group
      filters[ filterGroup ] = $this.attr('data-filter');
      // combine filters
      var filterValue = concatValues( filters );
      // set filter for Isotope
      $grid.isotope({ filter: filterValue });
    });

    // change is-checked class on buttons
    $('.button-group').each( function( i, buttonGroup ) {
      var $buttonGroup = $( buttonGroup );
      $buttonGroup.on( 'click', 'button', function() {
        $buttonGroup.find('.is-checked').removeClass('is-checked');
        $( this ).addClass('is-checked'); 

        if ($( this ).parent().attr('data-filter-group') == 'shade'){}

      });
    });


    $( "#shade-btn-group button" ).on( "click", function() {
    
    resultProducts = [];
    resultSku = [];
    productList = "";
    productSku = ""; 

      $grid.on( 'arrangeComplete', function( event, filteredItems ) {

          $( "#shadeSelector-grid div:visible" ).each(function() {
              productList = productList + ($(this).attr('data-product'))+ ","; 
              productSku  = productSku  + ($(this).attr('data-sku'))+ " "; 
             });

        resultProducts = productList.split(",");
        resultSku      = productSku.split(" ");

        buildProductList();

        delete resultProducts;
        delete productList;

      });


    });         

  
  
  
function buildProductList() {


jQuery.each( resultSku, function( i, val ) {
   var text = "/products/" + val + ".js";

  $("div#"+val).removeClass("hide");
  
  

  
}); 
  
}
 


  
// flatten object by concatting values
function concatValues( obj ) {
  var value = '';
  for ( var prop in obj ) {
    value += obj[ prop ];
  }
  return value;
}
});
</script>

